[{"title":"node","path":"/2024/07/06/node/","content":"1 安装1.1 nvm解压nvm-noinstall.zip，以管理员运行install.cmd修改settings.json 123456root: D:\\DE\\Web vm-noinstallpath: D:\\DE\\Web vm-nodejsarch: 64proxy: nonenode_mirror: https://npmmirror.com/mirrors/node/npm_mirror: https://npmmirror.com/mirrors/npm/ 修改环境变量NVM_HOME &#x3D; D:\\DE\\Web vm-noinstallNVM_SYMLINK &#x3D; D:\\DE\\Web vm-nodejs 在用户文件夹新建.npmrc文件 12345678# 全局安装位置prefix=D:\\DE\\Web pm-global # 缓存位置cache=D:\\DE\\Web pm-cache# 镜像仓库registry=https://registry.npmmirror.comELECTRON_MIRROR=https://npmmirror.com/mirrors/electron/ELECTRON_BUILDER_BINARIES_MIRROR=https://npmmirror.com/mirrors/electron-builder-binaries/ 打开终端 123456789101112131415nvm --versionnvm install ltsnvm use 20nvm on npm config listnpm install -g npmnpm install -g yarnnpm install -g cnpmnpm install -g pnpmnpm install -g hexo-cli# npm 全局安装地址npm config get prefix# npm 缓存位置npm config get cache 2 配置"},{"title":"git","path":"/2024/06/27/git/","content":"1 git 常用命令概览1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586git init # 初始化本地git仓库（创建新仓库）git config --global user.name &quot;xxx&quot; # 配置用户名git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件git config --global color.ui true # git status等命令自动着色git config --global color.status autogit config --global color.diff autogit config --global color.branch autogit config --global color.interactive autogit config --global --unset http.proxy # remove proxy configuration on gitgit clone git+ssh://git@192.168.53.168/VT.git # clone远程仓库git status # 查看当前版本状态（是否修改）git add xyz # 添加xyz文件至indexgit add . # 增加当前子目录下所有更改过的文件至indexgit commit -m &#x27;xxx&#x27; # 提交git commit --amend -m &#x27;xxx&#x27; # 合并上一次提交（用于反复修改）git commit -am &#x27;xxx&#x27; # 将add和commit合为一步git rm xxx # 删除index中的文件git rm -r * # 递归删除git log # 显示提交日志git log -1 # 显示1行日志 -n为n行git log -5git log --stat # 显示提交日志及相关变动文件git log -p -mgit show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容git show dfb02 # 可只用commitid的前几位git show HEAD # 显示HEAD提交日志git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本git tag # 显示已存在的taggit tag -a v2.0 -m &#x27;xxx&#x27; # 增加v2.0的taggit show v2.0 # 显示v2.0的日志及详细内容git log v2.0 # 显示v2.0的日志git diff # 显示所有未添加至index的变更git diff --cached # 显示所有已添加index但还未commit的变更git diff HEAD^ # 比较与上一个版本的差异git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异git diff origin/master..master # 比较远程分支master上有本地分支master上没有的git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）git branch # 显示本地分支git branch --contains 50089 # 显示包含提交50089的分支git branch -a # 显示所有分支git branch -r # 显示所有原创分支git branch --merged # 显示所有已合并到当前分支的分支git branch --no-merged # 显示所有未合并到当前分支的分支git branch -m master master_copy # 本地分支改名git checkout -b master_copy # 从当前分支创建新分支master_copy并检出git checkout -b master master_copy # 上面的完整版git checkout features/performance # 检出已存在的features/performance分支git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支git checkout v2.0 # 检出版本v2.0git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出git checkout -- README # 检出head版本的README文件（可用于修改错误回退）git merge origin/master # 合并远程master分支至当前分支git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改git push origin master # 将当前分支push到远程master分支git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支git push --tags # 把所有tag推送到远程仓库git fetch # 获取所有远程分支（不更新本地分支，另需merge）git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支git pull origin master # 获取远程分支master并merge到当前分支git mv README README2 # 重命名文件README为README2git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退）git rebasegit branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933git ls-files # 列出git index包含的文件git show-branch # 图示当前分支历史git show-branch --all # 图示所有分支历史git whatchanged # 显示提交历史对应的文件修改git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818git ls-tree HEAD # 内部命令：显示某个git对象git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASHgit reflog # 显示所有提交，包括孤立节点git show HEAD@&#123;5&#125;git show master@&#123;yesterday&#125; # 显示master分支昨天的状态git log --pretty=format:&#x27;%h %s&#x27; --graph # 图示提交日志git show HEAD~3git show -s --pretty=raw 2be7fcb476git stash # 暂存当前修改，将所有至为HEAD状态git stash list # 查看所有暂存git stash show -p stash@&#123;0&#125; # 参考第一次暂存git stash apply stash@&#123;0&#125; # 应用第一次暂存git grep &quot;delete from&quot; # 文件中搜索文本“delete from”git grep -e &#x27;#define&#x27; --and -e SORT_DIRENTgit gcgit fsck 2 git 常用命令 详述2.1 本地初始化项目并上传12345678910111213mkdir git-projectcd git-projectgit init# * 代表 将所有文件添加到暂存区， . 代表将所有新文件和修改过的文件添加到暂存区git add * git add . # git commit -m &quot;update&quot;# https git remote add origin https://github.com/Dawn-515/Dawn-515.github.io.git# sshgit remote add origin git@github.com:Dawn-515/Dawn-515.github.io.gitgit push -u origin &quot;master&quot; 2.2 从仓库下载项目1git clone git@github.com:Dawn-515/Dawn-515.github.io.git 2.3 ssh密钥连接首先生成两组密钥 1234ssh-keygen -t ed25519 -C &quot;Gitee SSH Key&quot;# 输入密钥名称:Gitee-SSH-Key，再按两下回车ssh-keygen -t ed25519 -C &quot;Github SSH Key&quot;# 输入密钥名称:Github-SSH-Key，再按两下回车 然后进入”C:\\Users\\24970.ssh”文件夹，分别打开Gitee-SSH-Key和Github-SSH-Key，复制到gitee和github。接下来新建一个config文件 123456789# github配置文件Host github.com Hostname ssh.github.com Port 443 IdentityFile ~/.ssh/Github-SSH-Key# gitee配置文件Host gitee.com Hostname ssh.gitee.com IdentityFile ~/.ssh/Gitee-SSH-Key 1ssh -T git@gitee.com 最后测试一下是否成功 1234ssh -T git@github.comssh -T git@gitee.comssh git@github.com ssh git@gitee.com 2.41git status"},{"title":"windows","path":"/2024/06/24/windows/","content":"windows1免密自动登录1.1 使用微软账户登录win+r 运行 netplwiz取消勾选 “要使用本计算机，用户必须输入用户名密码”然后两遍输入微软账户的密码，无需修改用户名 1.2 使用本地账户登录2 windows开启SSH服务端服务端windows打开设置，依次选择应用，应用和功能，可选功能，添加功能，搜索ssh,然后安装OpenSSH服务器。 安装完成后，以管理员身份启动cmd或powershell，输入 1net start sshd 接下来就可以通过另一台客户端电脑连接服务端windows了，但是默认是连接到服务端的cmd， 以管理员身份启动powshell，输入以下代码可以使SSH连接Windows时默认使用Powershell 1New-ItemProperty -Path &quot;HKLM:\\SOFTWARE\\OpenSSH&quot; -Name DefaultShell -Value &quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&quot; -PropertyType String -Force 3 windwos服务常用端口 服务 协议 端口 FTP TCP 21 SSH(包括ssh和sftp) TCP 22 telnet TCP 23 SMTP TCP 25 http TCP 80 P0P3 TCP 110 https TCP 443 smb TCP 445 mysql TCP 3306 远程桌面连接 TCP 3389 DNS UDP 53 DHCP UDP 68 TFTP(简单文件传输系统) UDP 69 SNMP UDP 161 NFS(网络文件系统) UDP 2049 一般情况下，为了安全起见，运行商会封禁以下端口 80(http) 443(https) 445(samba) 25(SMTP) 465(SMTPS) 4 公网smb1 ipv6 + ddns-go + 开放netlogon2 ipv4 + ddns-go + 端口转发2.1方法1 在服务端与客户端分别进行端口转发（失败）服务端(家里台式机)， 1netsh interface portproxy add v4tov4 listenport=希望被修改成的服务器端口 listenaddress=0.0.0.0 connectport=445 connectaddress=127.0.0.1 比如,将smb默认的127.0.0.1:445端口转发给127.0.0.1:4455端口 1netsh interface portproxy add v4tov4 listenport=4455 listenaddress=127.0.0.1 connectport=445 connectaddress=127.0.0.1 客户端(学校笔记本) 1netsh interface portproxy add v4tov4 listenport=445 listenaddress=127.0.0.1 connectport=服务器端口 connectaddress=服务器IP 比如，将180.108.102.103:4455转发给127.0.0.2:445 1netsh interface portproxy add v4tov4 listenport=445 listenaddress=127.0.0.2 connectport=4455 connectaddress=ipv6.chenxiaoijiajia.top 查看全部端口转发： 1netsh interface portproxy show all 删除端口转发： 1netsh interface portproxy delete v4tov4 listenaddress=欲删除项目的监听IP listenport=欲删除项目的监听端口 比如 删除 127.0.0.2:445 1netsh interface portproxy delete v4tov4 listenaddress=127.0.0.2 listenport=445 方法2 路由器设置端口转发（成功）5 字体windows terminal 工具 字体 字号 行高 第二字体 windows terminal MesloLGSDZ Nerd Font Mono 14 tabby MesloLGSDZ Nerd Font Mono 18 2 微软雅黑 idea 编辑器字体即配色方案字体 MiSans 20 1.2 Microsoft YaHei idea 编辑器字体即配色方案字体 方案2 UbuntuMono Nerd Font Mono 20 1.2 Microsoft YaHei ideaUI Microsoft YaHei 16 idea 控制台 MesloLGSDZ Nerd Font Mono 18 1.2 术语在下载某些字体时，可能会遇到相关术语，如下： mono 即 Monospaced，等宽字体（一般指英文等宽） Proportional 比例字体 Serif 衬线体在字的笔画开始、结束的地方有额外的装饰，而且笔画的粗细会有所不同。毛边 sans 即 Sans-Serif，无衬线体没有这些额外的装饰，而且笔画的粗细差不多。 gothic 哥特体，即无衬线体 上述术语都是针对英文字体的 对于中文梯子 hinted 显示效果微调的字体 unhinted 无微调字体 VF (Variable fonts) :可变字体，可以自由的调整字体的粗细 slab 一般较为厚重，适用于强调性文本，标题等，不适用于长文本 微调(hinting)分为两种：内嵌微调与自动微调。内嵌微调是字体设计者耗费大量的时间和精力、精心制作的、内嵌在字体文件中的额外指令，本质上是人工微调；而自动微调(autohint)是 FreeType 内嵌的一套微调算法，通用于所有矢量字体，本质上是机器微调。一般说来，内嵌微调比自动微调的显示效果更佳。 上述术语都是针对英文字体的，对于中文字体，习惯性称衬线字体为宋体，非衬线字体为黑体 字重（字体大小） Thin 极细 Light 细体 Regular 常规 Medium 适中 Blod 粗体 Black 粗体 Heavy 特粗 italic 斜体 bolditalic 加粗斜体 regular 常规体 sc 即 Simplified Chinese，简体中文 tc 即 Traditional Chinese，繁体中文 cl 即 Classical Literature，《康熙字典》字形 ligature 连体字符，举例来说，会把 != 变成 ≠ 字体文件类型后缀： .otf 是指基于 PostScript 开发的 OTF 格式 （windows 对其支持不佳，例如：word 无法将这类字体嵌入到 pdf 中） .ttf包含两类字体： 一类是古老的 TTF 格式； 另一类是 基于 TTF 开发的 OTF 格式.ttc (TrueType Collection) 是 ttf (TrueType Collection) 的集合。 https://blog.csdn.net/weixin_39550940/article/details/111739766 Sarasa Gothic &#x2F; 更纱黑体：基于Noto Sans，全宽引号 Quotes (“”) are full width —— Gothic Sarasa UI &#x2F; 更纱黑体 UI：基于Noto Sans窄引号 Quotes (“”) are narrow —— UI Sarasa Mono T &#x2F; 等距更纱黑体 T：基于Iosevka，有连字，全宽破折号 Have ligature, Em dashes (——) are full width —— MonoT Sarasa Mono &#x2F; 等距更纱黑体：基于Iosevka，有连字，半宽破折号 Have ligature, Em dashes (——) are half width —— Mono Sarasa Term：基于Iosevka，无连字，半宽破折号 No ligature, Em dashes (——) are half width —— Term 适合代码 的 mono sans Nerd fonts unhinted 中英文2:1的字体 1 Dejavu Sans Mono 2 Sarasa mono SC(等距更纱黑体) Sarasa Term SC Nerd Sarasa Mono SC Nerd 旧版 Sarasa Mono SC Nerd &amp; Sarasa Mono SC Wide Nerd 新版 3 思源黑体HW ​ https://zhuanlan.zhihu.com/p/623573927 6 vscodevscode 远程运行R 远程服务器 1 R环境 和R包 12install.packages(&quot;languageserver&quot;)install.packages(&quot;httpgd&quot;) 2 python环境 和radianpipx install radian 本地电脑 1 vscode remote-SSH插件 7 winget查询参数 winget install -q 1winget install --id packageid --scope machine 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859winget install --id packageid --scope machine# --scope machine ==&gt; C:\\Program Files\\WinGet\\Packages#### zip格式 ###### --scope machine 全局安装 ## ## 用户安装## C:\\Users\\24970\\AppData\\Local\\Microsoft\\WinGet\\Packages\\sharkdp.fd_Microsoft.Winget.Source_8wekyb3d8bbwe\\fd-v8.7.1-x86_64-pc-windows-msvc# tsshwinget install tssh --scope machine# 用户安装到 # C:\\Users\\cx\\AppData\\Local\\Microsoft\\WinGet\\Packages\\Fastfetch-cli.Fastfetch_Microsoft.Winget.Source_8wekyb3d8bbwe\\fastfetch.exewinget install fastfetch# 全局安装到 # C:\\Program Files\\WinGet\\Links\\fastfetch.exewinget install fastfetch --scope machine# batwinget install --id sharkdp.bat --scope machine# fd-findwinget install sharkdp.fdwinget install --id sharkdp.fd --scope machine# hexyl 16进制查看器winget install --id sharkdp.hexyl --scope machine# dustwinget install --id bootandy.dust --scope machine# dufwinget install --id muesli.duf --scope machine# zoxidewinget install --id ajeetdsouza.zoxide --scope machine# fzfwinget install --id junegunn.fzf --scope machine#### msi格式 ##### bottom 默认安装在 C:\\Program Files\\bottomwinget install --id Clement.bottombtm#### exe格式 ####winget install wingetui### 失败# procs 尚未进winget源# lsd 只能用choco# 测试winget install voidtools.Everything# 安装到了 C:\\Program Files\\Everythingwinget install Eugeny.Tabbywinget install trzsz.tssh --scope machinewinget install fastfetch --scope machine 1234# 忽略更新winget pin add Xmind.Xmindwinget pin add Tonec.InternetDownloadManagerwinget pin add package oh-my-posh M365Princessaliensatomicblueishcapr4ncatppuccin8 出现ms-gamingoverlay问题1 实测 只需修改1HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GameDVR 找到其中AppCaptureEnabled这个键值，把值改为0。 2HKEY_CURRENT_USER\\System\\GameConfigStore 找打其中GameDVR_Enabled这个键值，把值改为0 9 系统文件夹与用户文件夹1 启动文件夹1.1 系统启动文件夹1234567891011# 1 启动文件夹（三者等价）shell:CommonStartup%programdata%\\Microsoft\\Windows\\Start Menu\\Programs\\StartupC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp# 2 注册表# 2.1 普通注册表计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run# 3 计划任务管理 - 计划 1.2 用户启动文件夹123456789# 1 启动文件夹（三者等价）shell:startup%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\StartupC:\\Users\\用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup# 2 注册表（两种方式）# 2.1 普通注册表计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run# 2.2 uwp应用注册表计算机\\HKEY_CURRENT_USER\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\SystemAppData\\45479liulios.17062D84F7C46_p7pnf6hceqser\\SnipasteStartupTask 2 powershell 配置文件2.1当前用户，当前主机(用得较多)1234$PROFILE$PROFILE.CurrentUserCurrentHost$HOME\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1C:\\Users\\用户名\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1 2.2 当前用户，所有主机12$PROFILE.CurrentUserAllHosts$HOME\\Documents\\PowerShell\\Profile.ps1 2.3 所有用户，当前主机12$PROFILE.AllUsersCurrentHost$PSHOME\\Microsoft.PowerShell_profile.ps1 2.2 所有用户，所有主机12$PROFILE.AllUsersAllHosts$PSHOME\\Profile.ps1 10 [电源计划](powercfg &#x2F;list)powercfg &#x2F;list 11 删除AMD software 桌面右键菜单首先从计算机\\HKEY_CLASSES_ROOT\\PackagedCom\\Package\\AdvancedMicroDevicesInc-2.AMDRadeonSoftware_10.22.20073.0_x64__0a9344xs7nr4m\\Server\\0获取SurrogateAppId的值&#123;6767B3BC-8FF7-11EC-B909-0242AC120002&#125;然后在计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions新建项Blocked,新建字符串值&#123;6767B3BC-8FF7-11EC-B909-0242AC120002&#125;,值为AMD Software : Adrenalin Edition,重启资源管理器 利用mklink实现OneDrive自定义文件双向同步https://blog.csdn.net/u014532291/article/details/131805350 https://www.cnblogs.com/sexintercourse/p/18442332 总结：为了实现双向同步，可以将文件本体放在onedrive中，通过mklink映射到本地，这样可以本地修改，会实时同步到onedrive mklink 12345678910111213C:\\Users\\24970&gt;mklink -help 命令语法不正确。 创建符号链接。 MKLINK [[/D] | [/H] | [/J]] Link Target /D 创建目录符号链接。默认为文件 符号链接。 /H 创建硬链接而非符号链接。 /J 创建目录联接。 Link 指定新的符号链接名称。 Target 指定新链接引用的路径 (相对或绝对)。 1 widnows terminal首先 将settings.json 放到 C:\\Users\\24970\\OneDrive\\基础资料\\1-配置文件\\4-终端\\settings.json” 然后 mklink “C:\\Users\\24970\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json” “C:\\Users\\24970\\OneDrive\\基础资料\\1-配置文件\\4-终端\\settings.json” 2 powershell123Get-ExecutionPolicy -ListSet-Executionpolicy remotesigned $PROFILE C:\\Users\\24970\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1 powershell 7 powershell 5 $PROFILE “C:\\Users\\24970\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1” “C:\\Users\\24970\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1” onedrive “C:\\Users\\24970\\OneDrive\\基础资料\\1-配置文件\\4-终端\\Microsoft.PowerShell7_profile.ps1” “C:\\Users\\24970\\OneDrive\\基础资料\\1-配置文件\\4-终端\\Microsoft.PowerShell5_profile.ps1” sudo mklink “C:\\Users\\24970\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1” “C:\\Users\\24970\\OneDrive\\基础资料\\1-配置文件\\4-终端\\Microsoft.PowerShell7_profile.ps1” sudo mklink “C:\\Users\\24970\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1” “C:\\Users\\24970\\OneDrive\\基础资料\\1-配置文件\\4-终端\\Microsoft.PowerShell5_profile.ps1”"},{"title":"在 GitHub Pages 上部署 Hexo","path":"/2024/06/24/hexo-tutorial-deploy-githubpages-beginner/","content":"在 GitHub Pages 上部署 Hexo1 前言1.1 github pageGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。 1.2 hexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 1.3 总结使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定（网络问题除外）。本文就将详细介绍 在windows 11系统下使用 Hexo + GitHub 搭建免费个人博客网站的过程。 2 创建github仓库打开 github 页面，点击右上角 + 号，再点击 New repository，在Repository name 中输入 用户名.github.io，最后点击 Create repository 即可。 3 本地部署hexo本步骤主要参考 官方文档。 3.1 首先使用npm安装 hexo-cli12npm install -g hexo-clihexo -version 3.2 然后进入代码目录初始化项目1234cd E:\\workplace\\githubhexo init hexo-blogcd hexo-blognpm install 其中，hexo init [folder] 包括两个步骤: 1 git clone hexo-starter; 2 将 hexo-theme-landscape 主题移动到指定目录。至此，最基础的本地部署已经完成，可以在本地进行预览： 12hexo g # 生成静态文件hexo s # 启动本地服务器，打开网页即可预览 3.3 设置个性化主题3.3.1 solitude首先下载主题文件到 themes 文件夹内，并安装依赖； 1234cd E:\\workplace\\github\\hexo-bloggit clone -b main https://github.com/everfu/hexo-theme-solitude.git themes/solitudecd themes/solitudenpm install hexo-renderer-pug hexo-renderer-stylus --save 然后修改 hexo 根目录中的_config.yml，把主题改为 solitude，将语言修改为中文。 12theme: solitude # 指定主题language: zh-CN # 指定语言 将 solitude 中的配置文件 _config.yml 复制到 hexo 根目录，并改名为 _config.solitude.yml 12cd E:\\workplace\\github\\hexo-blogcopy themes\\solitude\\_config.yml _config.solitude.yml 注意三个配置文件的优先级 _config.yml中的theme config &gt; _config.my-theme.yml &gt; themes/my-theme/_config.ymlhexo 根目录中 _config.solitude.yml 的配置是高优先级，因此，渲染时会优先采用此文件的配置项内容。在更新主题时可能会存在配置变更，请注意更新说明，可能需要手动对 _config.solitude.yml 同步修改。想查看覆盖配置有没有生效，可以通过 hexo g --debug 查看命令行输出。 最后重新启动 1hexo s 3.3.2 fluid首先下载主题文件到 themes 文件夹内, 12cd E:\\workplace\\github\\hexo-bloggit clone -b master git@github.com:fluid-dev/hexo-theme-fluid.git themes/fluid 然后修改 hexo 根目录中的_config.yml，把主题改为 fluid，将语言修改为中文。 12theme: fluid # 指定主题language: zh-CN # 指定语言 12cd E:\\workplace\\github\\hexo-blogcopy themes\\fluid\\_config.yml _config.fluid.yml 4 上传到GitHub首先安装依赖， 1npm install hexo-deployer-git --save 然后修改 _config.yml 1234deploy: type: git repo: git@github.com:Dawn-515/Dawn-515.github.io.git branch: main 可以同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。 1234567deploy:- type: git repo: git@github.com:Dawn-515/Dawn-515.github.io.git branch: main- type: git repo: git@gitee.com:mulin_cx/mulin_cx.gitee.io.git branch: master 最后执行推送 hexo g &amp;&amp; hexo c &amp;&amp; hexo d。 12hexo c # 清除缓存文件 (db.json) 和已生成的静态文件 (public)。hexo d # 部署网站 当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。 浏览个人网站 用户名.github.io。"},{"title":"Hello World","path":"/2024/06/24/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]